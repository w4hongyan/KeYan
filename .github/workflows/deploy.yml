name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DEBUG: True
        SECRET_KEY: test-secret-key
      run: |
        python manage.py test
        python manage.py check --deploy

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security check
      run: |
        python scripts/git_security_check.py

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}-backend
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}-frontend
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          docker-compose.prod.yml \
          nginx.prod.conf \
          deploy.sh \
          deploy.bat \
          .env.example \
          DEPLOYMENT.md
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          # 创建项目目录
          mkdir -p /opt/keyan
          cd /opt/keyan
          
          # 备份当前配置
          if [ -f docker-compose.prod.yml ]; then
            cp docker-compose.prod.yml docker-compose.prod.yml.backup
          fi
          
          # 下载部署包
          curl -L -o deployment.tar.gz "${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/deployment.tar.gz"
          
          # 解压部署包
          tar -xzf deployment.tar.gz
          
          # 设置环境变量
          if [ ! -f .env ]; then
            cp .env.example .env
          fi
          
          # 更新镜像
          docker-compose -f docker-compose.prod.yml pull
          
          # 数据库迁移
          docker-compose -f docker-compose.prod.yml run --rm backend python manage.py migrate
          
          # 收集静态文件
          docker-compose -f docker-compose.prod.yml run --rm backend python manage.py collectstatic --noinput
          
          # 启动服务
          docker-compose -f docker-compose.prod.yml up -d
          
          # 健康检查
          sleep 30
          curl -f http://localhost/health/ || exit 1
          
          # 清理旧镜像
          docker system prune -f

  release:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          deployment.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false